@function line-height-harmony-get-ratio($ratio: null) {
  @if ($ratio == null and map-has-key($line-height-harmony-settings, ratio) == true) {
    @return map-get($line-height-harmony-settings, ratio);
  } @else if not ($ratio == null) {
    @return $ratio;
  } @else {
    @warn "'ratio' not found in line-height-harmony-settings. Golden ratio assumed.";
    @return 1.61803398875;
  }
}

@function line-height-harmony-get-font-size-root($font-size-root) {
  @if (map-has-key($line-height-harmony-settings, font-size-root) == true) {
    $default: map-get($line-height-harmony-settings, font-size-root);
    @if ($default == $font-size-root) or ($font-size-root == null) {
      @return $default;
    } @else {
      @return line-height-harmony-convert-to-px($font-size-root, $default);
    }
  } @else {
    @warn "'font-size-root' not found in your line-height-harmony-settings. 16px root assumed.";
    @return 16px;
  }
}

/**
 * The line algorythm is based on pixel size, so we're converting presumed for use
 *
 * @param {string/number} $number             Number to convert to unitless px
 * @param {string/number} $font-size-root     Number for REM conversion.
 * @param {string}        $font-or-width      Determines which default to fall back to
 */
@function line-height-harmony-convert-to-px($number, $font-size-root, $font-or-width: null) {
  $unit: unit($number);
  $number: strip-unit($number);
  @if($font-or-width == 'font' and $unit == '') {@if map-has-key($line-height-harmony-settings, font-size-unit) {
    $unit: map-get($line-height-harmony-settings, font-size-unit);
  } @else {
      $unit: 'em';
    }
  }
  @if($font-or-width == 'width' and $unit == '') {@if map-has-key($line-height-harmony-settings, width-unit) {
      $unit: map-get($line-height-harmony-settings, width-unit);
    } @else {
      $unit: 'px';
    }
  }
  @if not ($unit == 'px' or $unit == 'em' or $unit == 'rem') {
    @error "Unsupported unit used: #{$unit}.";
  }
  @if ($unit == em or $unit == rem) {
    $number: $number * $font-size-root;
  }
  @return $number;
}

/**
 * Remove unit from numbers
 */
@function strip-unit($number) {
  $n: $number / ($number * 0 + 1);
  @return $n;
}
